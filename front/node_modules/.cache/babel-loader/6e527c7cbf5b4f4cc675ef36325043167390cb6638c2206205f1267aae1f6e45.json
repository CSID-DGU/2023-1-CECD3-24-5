{"ast":null,"code":"var _jsxFileName = \"/Users/sim-yeoeun/Documents/GitHub/2023-1-CECD3-24-5/front/src/pages/QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport '../styles/QuizPage.css';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ShowQuiz() {\n  _s();\n  //InputPage로 다시 이동하기 위함\n  const navigate = useNavigate();\n  const location = useLocation();\n  const quizData = location.state || [];\n\n  //테스트할 임시 데이터\n  // const quizData = [\n  //     {\n  //         id: 1,\n  //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n  //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n  //         answer : 2\n  //     },\n  //     {\n  //         id: 2,\n  //         problem: 'Which of the following sorting algorithms is NOT stable?',\n  //         select : ['quick sort', 'insertion sort', 'merge sort', 'bubble sort'],\n  //         answer : 2\n  //     },\n  //     {\n  //         id: 3,\n  //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n  //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n  //         answer : 2\n  //     },\n  //     {\n  //         id: 4,\n  //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n  //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n  //         answer : 2\n  //     },\n  //     {\n  //         id: 5,\n  //         problem: 'Which of the following sorting algorithms is NOT stable?',\n  //         select : ['quick sort', 'insertion sort', 'merge sort', 'bubble sort'],\n  //         answer : 2\n  //     },\n  //     {\n  //         id: 6,\n  //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n  //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n  //         answer : 2\n  //     }\n  // ];\n\n  //사용자의 답 관리. selectopt = { 문제번호 : 선택지의 인덱스 }\n  const [selectOpt, setSelectOpt] = useLocalStorage('selectOpt', {});\n  //사용자의 틀린 답 관리. wrongAnswers = bool형\n  const [wrongAnswers, setWrongAnswers] = useLocalStorage('wrongAnswers', {});\n  //사용자의 맞은 문제 수를 저장하는 상태\n  const [correctCnt, setCorrectCnt] = useLocalStorage('correctCnt', 0);\n  //정답 확인하기 버튼을 눌렀는지 확인하는 상태\n  //사용자가 답을 체크한 후, 상태를 localStorage에 저장 -> 새로고침 해도 checkedAnswer == true인 상태를 로드\n  const [checkedAnswer, setCheckedAnswer] = useLocalStorage('checkedAnswer', false);\n  const handleSelect = (quizId, optionIndex) => {\n    setSelectOpt(prevState => ({\n      ...prevState,\n      [quizId]: optionIndex\n    }));\n  };\n  const handleAnswer = () => {\n    let correct = 0;\n    const wrongs = {};\n    quizData.forEach(quiz => {\n      //사용자가 해당 문제에 대해 선택한 답이 있다면 -> 사용자가 모두 답을 선택해야만 버튼 누를수 있게 바꾸기\n      if (selectOpt[quiz.id] !== undefined) {\n        //선택한 답과 정답이 일치한다면\n        if (selectOpt[quiz.id] === quiz.answer) {\n          correct++;\n        } else {\n          //일치하지 않는다면\n          wrongs[quiz.id] = true;\n        }\n      }\n    });\n    setCorrectCnt(correct);\n    setWrongAnswers(wrongs);\n    setCheckedAnswer(true);\n  };\n  const handleRestart = () => {\n    // 로컬 스토리지의 모든 항목 초기화\n    localStorage.clear();\n    navigate('/InputPage');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [checkedAnswer && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"answerText\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [quizData.length, \" \\uBB38\\uC81C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 45\n      }, this), \" \\uC911 \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [correctCnt, \" \\uBB38\\uC81C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 81\n      }, this), \" \\uB9DE\\uC558\\uC2B5\\uB2C8\\uB2E4! \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quizBox\",\n      children: quizData.map(quiz => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quizContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: wrongAnswers[quiz.id] ? {\n            color: 'red'\n          } : {},\n          children: [quiz.id, \". \", quiz.problem]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this), quiz.select.map((option, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"quizOption\",\n          style: wrongAnswers[quiz.id] && index === quiz.answer ? {\n            color: 'red'\n          } : {},\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `quiz-${quiz.id}`,\n            value: index,\n            onChange: () => handleSelect(quiz.id, index),\n            disabled: checkedAnswer,\n            checked: selectOpt[quiz.id] === index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }, this), option]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this))]\n      }, quiz.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answerBtnBox\",\n      children: checkedAnswer ?\n      /*#__PURE__*/\n      //사용자가 정답 확인하기 버튼을 누르면 -> 다시 출제하기 버튼 보이기\n      _jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"\\uB2E4\\uC2DC \\uCD9C\\uC81C\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAnswer,\n        children: \"\\uC815\\uB2F5 \\uD655\\uC778\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ShowQuiz, \"0HVdOudz0MgRsgSArXbABsAUcJI=\", false, function () {\n  return [useNavigate, useLocation, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage];\n});\n_c = ShowQuiz;\nfunction QuizPage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ShowQuiz, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 14\n    }, this)\n  }, void 0, false);\n}\n_c2 = QuizPage;\nexport default QuizPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"ShowQuiz\");\n$RefreshReg$(_c2, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","useLocalStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowQuiz","_s","navigate","location","quizData","state","selectOpt","setSelectOpt","wrongAnswers","setWrongAnswers","correctCnt","setCorrectCnt","checkedAnswer","setCheckedAnswer","handleSelect","quizId","optionIndex","prevState","handleAnswer","correct","wrongs","forEach","quiz","id","undefined","answer","handleRestart","localStorage","clear","children","className","length","fileName","_jsxFileName","lineNumber","columnNumber","map","style","color","problem","select","option","index","type","name","value","onChange","disabled","checked","onClick","_c","QuizPage","_c2","$RefreshReg$"],"sources":["/Users/sim-yeoeun/Documents/GitHub/2023-1-CECD3-24-5/front/src/pages/QuizPage.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport '../styles/QuizPage.css';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nfunction ShowQuiz() {\n    //InputPage로 다시 이동하기 위함\n    const navigate = useNavigate();\n\n    const location = useLocation();\n    const quizData = location.state || [];\n\n    //테스트할 임시 데이터\n    // const quizData = [\n    //     {\n    //         id: 1,\n    //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n    //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n    //         answer : 2\n    //     },\n    //     {\n    //         id: 2,\n    //         problem: 'Which of the following sorting algorithms is NOT stable?',\n    //         select : ['quick sort', 'insertion sort', 'merge sort', 'bubble sort'],\n    //         answer : 2\n    //     },\n    //     {\n    //         id: 3,\n    //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n    //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n    //         answer : 2\n    //     },\n    //     {\n    //         id: 4,\n    //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n    //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n    //         answer : 2\n    //     },\n    //     {\n    //         id: 5,\n    //         problem: 'Which of the following sorting algorithms is NOT stable?',\n    //         select : ['quick sort', 'insertion sort', 'merge sort', 'bubble sort'],\n    //         answer : 2\n    //     },\n    //     {\n    //         id: 6,\n    //         problem : 'What is the time complexity of Bubble Sort in the worst-case scenario?',\n    //         select : ['O(n^2)', 'O(n log n)', 'O(n)', 'O(1)'],\n    //         answer : 2\n    //     }\n    // ];\n\n\n\n    //사용자의 답 관리. selectopt = { 문제번호 : 선택지의 인덱스 }\n    const [selectOpt, setSelectOpt] = useLocalStorage('selectOpt', {});\n    //사용자의 틀린 답 관리. wrongAnswers = bool형\n    const [wrongAnswers, setWrongAnswers] = useLocalStorage('wrongAnswers', {});\n    //사용자의 맞은 문제 수를 저장하는 상태\n    const [correctCnt, setCorrectCnt] = useLocalStorage('correctCnt', 0);\n    //정답 확인하기 버튼을 눌렀는지 확인하는 상태\n    //사용자가 답을 체크한 후, 상태를 localStorage에 저장 -> 새로고침 해도 checkedAnswer == true인 상태를 로드\n    const [checkedAnswer, setCheckedAnswer] = useLocalStorage('checkedAnswer', false);\n\n\n    const handleSelect = (quizId, optionIndex) => {\n        setSelectOpt(prevState => ({ ...prevState, [quizId] : optionIndex}));\n    }\n\n    const handleAnswer = () => {\n        let correct = 0;\n        const wrongs = {};\n\n        quizData.forEach(quiz => {\n            //사용자가 해당 문제에 대해 선택한 답이 있다면 -> 사용자가 모두 답을 선택해야만 버튼 누를수 있게 바꾸기\n            if (selectOpt[quiz.id] !== undefined) {\n                //선택한 답과 정답이 일치한다면\n                if (selectOpt[quiz.id] === quiz.answer) {\n                    correct++;\n                }\n                else { //일치하지 않는다면\n                    wrongs[quiz.id] = true;\n                }\n            }\n        })\n\n        setCorrectCnt(correct);\n        setWrongAnswers(wrongs);\n        setCheckedAnswer(true);\n    };\n\n    const handleRestart = () => {\n        // 로컬 스토리지의 모든 항목 초기화\n        localStorage.clear();\n        navigate('/InputPage');\n    };\n\n    return (\n        <>\n            {checkedAnswer && \n                <h1 className=\"answerText\"> <span>{quizData.length} 문제</span> 중 <span>{correctCnt} 문제</span> 맞았습니다! </h1>\n            }\n            <div className=\"quizBox\">\n                {quizData.map((quiz) => (\n                    <div className= \"quizContainer\" key={quiz.id}>\n                        <h3 style={wrongAnswers[quiz.id] ? {color: 'red'} : {}}>{quiz.id}. {quiz.problem}</h3>\n                        {quiz.select.map((option, index) => (\n                            <label key={index} className=\"quizOption\" style={wrongAnswers[quiz.id] && index === quiz.answer ? {color: 'red'} : {}}>\n                                <input\n                                    type=\"radio\"\n                                    name={`quiz-${quiz.id}`}\n                                    value={index}\n                                    onChange={() => handleSelect(quiz.id, index)}\n                                    disabled={checkedAnswer}\n                                    checked={selectOpt[quiz.id] === index}\n                                /> \n                                {option}\n                            </label>\n                        ))}\n                    </div>\n                ))}\n            </div>\n            <div className=\"answerBtnBox\">\n                {checkedAnswer ? ( //사용자가 정답 확인하기 버튼을 누르면 -> 다시 출제하기 버튼 보이기\n                    <button onClick={handleRestart}>다시 출제하기</button>\n                ) : (\n                    <button onClick={handleAnswer}>정답 확인하기</button>\n                )}\n            </div>\n        </>\n    );\n}\n\n\n\n\nfunction QuizPage() {\n    return (\n        <>\n            {<ShowQuiz />}\n        </>\n    );\n}\n\nexport default QuizPage;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}