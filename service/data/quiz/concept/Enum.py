from z3 import *

Complexities, (On2, Onlogn, Onplusk, Owkn) = EnumSort('Complexities', [
            'On2',
            'Onlogn',
            'Onplusk',
            'Owkn'
        ])


Defi, (arr, ll, sta, que, dll,  tr, he, grp, ha) = EnumSort('Defi', [
              '인덱스와 인덱스에 대응하는 데이터들로 이루어진 자료구조',
              '다음 item에 대한 link가 있는 item들로 구성된 리스트',
              '가장 최근에 추가된 항목만 제거할 수 있는 항목 모음의 자료구조',
              '가장 먼저 추가된 항목만 액세스할 수 있는 항목 모음의 자료구조',
              '각 항목이 이전 항목과 다음 항목에 대한 링크를 갖는 연결리스트의 변형 자료구조',
              '그래프의 일종으로, 한 노드에서 시작해서 다른 정점들을 순회하여 자기 자신에게 돌아오는 순환이 없는 연결 그래프',
              '모든 노드의 키가 부모의 키보다 크거나 같은 완전한 트리',
              'node와 그 node를 연결하는 edge를 하나로 모아놓은 자료구조',
              '키를 값에 매핑할 수 있는 구조인, 연관 배열 추가에 사용되는 자료 구조'
        ])

Algorithms, (선택정렬, 힙정렬, 합병정렬, 퀵정렬, 버블정렬, 삽입정렬, 버킷정렬, 기수정렬, 쉘정렬) = EnumSort('Algorithms', ['선택정렬', '힙정렬', '합병정렬', '퀵정렬', '버블정렬', '삽입정렬', '버킷정렬', '기수정렬', '쉘정렬'])

DataStructure, (배열, 연결리스트, 스택, 큐, 트리, 그래프) = EnumSort('DataStructure', ['배열', '연결리스트', '스택', '큐', '트리', '그래프'])

Feats, (ms, qs, ss, bst, ht, bs, stac, queu, hea, bse, gra, dfs, bfs, dja, dyp, ga) = EnumSort('Feats', [
                "분할 정복 방법을 사용함",
                "피벗을 사용하여 배열을 분할",
                "각 단계에서 최소값을 찾아 위치를 교환",
                "정렬된 데이터의 빠른 검색을 가능하게 함",
                "키를 사용하여 데이터에 빠르게 접근",
                "인접한 요소를 비교하고 교환하여 정렬",
                "후입선출(LIFO) 방식으로 데이터 관리",
                "선입선출(FIFO) 방식으로 데이터 관리",
                "완전 이진 트리를 사용하여 최대값 또는 최소값에 빠르게 접근",
                "정렬된 배열에서 중간점을 기준으로 검색 범위를 줄여가며 탐색",
                "노드와 간선을 사용하여 항목 간의 관계를 표현",
                "가장 깊은 노드를 우선적으로 탐색",
                "같은 레벨의 노드를 우선적으로 탐색",
                "그래프에서 최단 경로를 찾는 알고리즘",
                "부분 문제의 결과를 저장하여 전체 문제 해결",
                "매 단계에서 최선의 선택을 하는 방식"
        ])